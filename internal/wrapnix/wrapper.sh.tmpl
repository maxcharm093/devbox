#!{{ .BashPath }}

{{/* 
# If env variable has never been set by devbox we set it, but also
# default to env value set by user. This means plugin env variables behave a bit
# differently than devbox.json env variables which are always set once.
*/ -}}

{{ range $k, $v := .Env }}
if [[ -z "$__DEVBOX_SET_{{ $k }}" ]]; then 
  export {{ $k }}="${ {{- $k }}:-{{ $v }}}"
  export __DEVBOX_SET_{{ $k }}="1"
fi
{{- end }}

{{/*
We use ShellEnvHashKey to prevent doing shellenv if the correct environment is
already set. (perf optimization)

We use the guard to prevent infinite loop if something in shellenv causes 
another wrapped binary to be called. The guard is specific to this project so shellenv
could still cause another project's shellenv to be called.

DO_NOT_TRACK=1 can be removed once we optimize segment to queue events.
*/ -}}

if [[ "${{ .ShellEnvHashKey }}" != "{{ .ShellEnvHash }}" ]] && [[ -z "${{ .ShellEnvHashKey }}_GUARD" ]]; then
export {{ .ShellEnvHashKey }}_GUARD=true
eval "$(DO_NOT_TRACK=1 devbox shellenv -c {{ .ProjectDir }})"
fi

filterPath() {
    # Get the pathEndsWith parameter
    local pathEndsWith="$1"

    # Split the existing PATH variable by ':' into an array
    IFS=':' read -ra paths <<< "$PATH"

    # Create an empty array to store the updated paths
    local new_paths=()

    # Iterate over each path
    for path in "${paths[@]}"; do
        # Check if the path ends with the specified value
        if [[ $path != *"$pathEndsWith" ]]; then
            # Path does not end with the specified value, add it to the new_paths array
            new_paths+=("$path")
        fi
    done

    # Join the new_paths array elements with ':' to form the updated PATH
    local updated_path=$(IFS=:; echo "${new_paths[*]}")

    # Export the updated PATH variable
    export PATH="$updated_path"
}

filterPath "virtenv/.wrappers/bin"

exec {{ .Command }} "$@"
